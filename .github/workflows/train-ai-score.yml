name: Train AI Score (Polygon)

on:
  workflow_dispatch:
    inputs:
      YEARS:
        description: "Years back (ignored if explicit dates; minute data is ~2y max on most plans)"
        default: "2"
        required: false
      TRAIN_START:
        description: "Start date (UTC) YYYY-MM-DD (optional)"
        required: false
      TRAIN_END:
        description: "End date (UTC) YYYY-MM-DD (optional)"
        required: false

permissions:
  contents: write

jobs:
  train:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute and clamp date window (Polygon minute data ≈ last 2y)
        id: window
        shell: bash
        run: |
          # 1) pick explicit inputs or fallback to "last N years"
          if [[ -n "${{ github.event.inputs.TRAIN_START }}" ]]; then
            START="${{ github.event.inputs.TRAIN_START }}"
            END="${{ github.event.inputs.TRAIN_END }}"
            [[ -z "$END" ]] && END=$(date -u +%Y-%m-%d)
          else
            YRS="${{ github.event.inputs.YEARS }}"
            [[ -z "$YRS" ]] && YRS=2
            START=$(date -u -d "-${YRS} years" +%Y-%m-%d)
            END=$(date -u +%Y-%m-%d)
          fi

          # 2) clamp to last 730 days (Polygon minute history limit for most plans)
          CUTOFF=$(date -u -d "-730 days" +%Y-%m-%d)
          # if START is older than CUTOFF, lift it up
          if [[ "$(date -u -d "$START" +%s)" -lt "$(date -u -d "$CUTOFF" +%s)" ]]; then
            echo "Requested START $START is older than minute-history cutoff $CUTOFF. Clamping to $CUTOFF."
            START="$CUTOFF"
          fi

          # ensure END >= START
          if [[ "$(date -u -d "$END" +%s)" -lt "$(date -u -d "$START" +%s)" ]]; then
            END="$START"
          fi

          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END" >> "$GITHUB_OUTPUT"
          echo "Training window: $START → $END"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          pip install --upgrade pip
          pip install requests pandas scikit-learn

      - name: Build training CSV
        env:
          POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}
          TRAIN_START: ${{ steps.window.outputs.start }}
          TRAIN_END:   ${{ steps.window.outputs.end }}
        run: |
          python scripts/make_training_from_polygon.py

      - name: Train model
        run: |
          python scripts/train_ai_score.py

      - name: Move model to public/
        run: |
          mkdir -p public
          mv model_logreg_v1.json public/model_logreg_v1.json

      - name: Commit model to repo
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add public/model_logreg_v1.json
          git commit -m "chore: update AI model (${{ steps.window.outputs.start }} → ${{ steps.window.outputs.end }})" || echo "No changes to commit"
          git push

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-score-artifacts
          path: |
            training_polygon_v1.csv
            public/model_logreg_v1.json
