name: Train AI Score (Polygon) — Chunked

on:
  workflow_dispatch:
    inputs:
      TRAIN_START:
        description: "Start date (YYYY-MM-DD). Leave blank for last ~24 months."
        required: false
        default: ""
      TRAIN_END:
        description: "End date (YYYY-MM-DD). Leave blank for today."
        required: false
        default: ""
      TICKERS:
        description: "Comma-separated tickers (e.g. AAPL,TSLA,AMD,NVDA). Leave blank for default."
        required: false
        default: ""
      CHUNK_MONTHS:
        description: "Months per chunk (1-3 recommended)."
        required: false
        default: "2"

permissions:
  contents: write

jobs:
  train:
    runs-on: ubuntu-latest
    timeout-minutes: 350

    env:
      POLYGON_API_KEY: ${{ secrets.POLYGON_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute window (clamp to ~24 months)
        id: win
        shell: bash
        run: |
          python - <<'PY'
          import os, datetime as dt
          from dateutil.relativedelta import relativedelta
          today = dt.date.today()
          end = dt.date.fromisoformat(os.getenv("INPUT_TRAIN_END") or str(today))
          if end > today: end = today
          start = os.getenv("INPUT_TRAIN_START")
          start = dt.date.fromisoformat(start) if start else end - relativedelta(months=24)
          print(f"::set-output name=start::{start.isoformat()}")
          print(f"::set-output name=end::{end.isoformat()}")
          print(f"::set-output name=chunk_months::{os.getenv('INPUT_CHUNK_MONTHS') or '2'}")
          PY

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas requests tenacity python-dateutil scikit-learn joblib

      - name: Configure git user for commits
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build training CSV in chunks and commit after each chunk
        shell: bash
        env:
          START: ${{ steps.win.outputs.start }}
          END: ${{ steps.win.outputs.end }}
          CHUNK_MONTHS: ${{ steps.win.outputs.chunk_months }}
          TICKERS: ${{ github.event.inputs.TICKERS }}
        run: |
          set -euo pipefail
          CHUNK_DIR="data/polygon_chunks"
          FINAL_DIR="data/training"
          mkdir -p "$CHUNK_DIR" "$FINAL_DIR"

          echo "Window: $START → $END  (chunk=${CHUNK_MONTHS} months)"
          echo "Tickers: ${TICKERS:-'(default in script)'}"

          # month starts
          readarray -t MONTH_STARTS < <(python - <<'PY'
          import os, datetime as dt
          from dateutil.relativedelta import relativedelta
          s = dt.date.fromisoformat(os.environ["START"])
          e = dt.date.fromisoformat(os.environ["END"])
          cur = dt.date(s.year, s.month, 1)
          end = dt.date(e.year, e.month, 1)
          out = []
          while cur <= end:
              out.append(cur.isoformat())
              cur = cur + relativedelta(months=1)
          print("\n".join(out))
          PY
          )

          n=${#MONTH_STARTS[@]}
          i=0
          while [ $i -lt $n ]; do
            START_MONTH=${MONTH_STARTS[$i]}
            CHUNK_END_MONTH=$(python - <<'PY'
            import os, datetime as dt
            from dateutil.relativedelta import relativedelta
            s = dt.date.fromisoformat(os.environ["START_MONTH"])
            step = int(os.environ["CHUNK_MONTHS"])
            e = dt.date.fromisoformat(os.environ["END"])
            chunk_end = (s + relativedelta(months=step)) - dt.timedelta(days=1)
            if chunk_end > e: chunk_end = e
            print(chunk_end.isoformat())
            PY
            )
            LABEL="${START_MONTH}_to_${CHUNK_END_MONTH}"
            CHUNK_CSV="data/polygon_chunks/chunk_${LABEL}.csv"

            if [ -f "$CHUNK_CSV" ]; then
              echo "✔ Chunk $LABEL already exists — skipping."
            else
              echo "▶ Building chunk $LABEL ..."
              export TRAIN_START="${START_MONTH}"
              export TRAIN_END="${CHUNK_END_MONTH}"
              export TICKERS="${TICKERS:-}"
              python scripts/make_training_from_polygon.py
              mv -f training_polygon_v1.csv "$CHUNK_CSV"
              git add "$CHUNK_CSV"
              git commit -m "data: polygon chunk ${LABEL}"
              git push
              echo "✔ Committed chunk $LABEL."
            fi

            i=$(( i + CHUNK_MONTHS ))
          done

          # Merge chunks
          FINAL_CSV="${FINAL_DIR}/training_polygon_v1.csv"
          echo "▶ Merging chunks into ${FINAL_CSV} ..."
          FIRST_CHUNK=$(ls -1 ${CHUNK_DIR}/chunk_*.csv | sort | head -n1)
          if [ -z "$FIRST_CHUNK" ]; then
            echo "No chunks to merge."
            exit 0
          fi
          head -n 1 "$FIRST_CHUNK" > "$FINAL_CSV"
          for f in $(ls -1 ${CHUNK_DIR}/chunk_*.csv | sort); do
            tail -n +2 "$f" >> "$FINAL_CSV"
          done
          git add "$FINAL_CSV"
          git commit -m "data: merged polygon chunks → training_polygon_v1.csv" || echo "No changes."
          git push
          echo "✔ Merge complete."

      - name: Train model
        shell: bash
        run: |
          export TRAINING_CSV="data/training/training_polygon_v1.csv"
          python scripts/train_ai_score.py

      - name: Commit model artifacts
        run: |
          git add models/ai_score_v1.pkl models/ai_score_v1_metrics.json || true
          git commit -m "model: ai_score_v1 trained from latest merged data" || echo "No changes."
          git push || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai_score_artifacts
          path: |
            data/training/training_polygon_v1.csv
            models/ai_score_v1.pkl
            models/ai_score_v1_metrics.json
